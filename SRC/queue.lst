                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (UNIX)
                              4 ; This file was generated Sun Nov 10 18:56:34 2013
                              5 ;--------------------------------------------------------
                              6 	.module queue
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _SPR0
                             13 	.globl _SPR1
                             14 	.globl _CPHA
                             15 	.globl _CPOL
                             16 	.globl _SPIM
                             17 	.globl _SPE
                             18 	.globl _WCOL
                             19 	.globl _ISPI
                             20 	.globl _I2CI
                             21 	.globl _I2CTX
                             22 	.globl _I2CRS
                             23 	.globl _I2CM
                             24 	.globl _MDI
                             25 	.globl _MCO
                             26 	.globl _MDE
                             27 	.globl _MDO
                             28 	.globl _CS0
                             29 	.globl _CS1
                             30 	.globl _CS2
                             31 	.globl _CS3
                             32 	.globl _SCONV
                             33 	.globl _CCONV
                             34 	.globl _DMA
                             35 	.globl _ADCI
                             36 	.globl _P
                             37 	.globl _F1
                             38 	.globl _OV
                             39 	.globl _RS0
                             40 	.globl _RS1
                             41 	.globl _F0
                             42 	.globl _AC
                             43 	.globl _CY
                             44 	.globl _CAP2
                             45 	.globl _CNT2
                             46 	.globl _TR2
                             47 	.globl _XEN
                             48 	.globl _TCLK
                             49 	.globl _RCLK
                             50 	.globl _EXF2
                             51 	.globl _TF2
                             52 	.globl _WDE
                             53 	.globl _WDS
                             54 	.globl _WDR2
                             55 	.globl _WDR1
                             56 	.globl _PRE0
                             57 	.globl _PRE1
                             58 	.globl _PRE2
                             59 	.globl _PX0
                             60 	.globl _PT0
                             61 	.globl _PX1
                             62 	.globl _PT1
                             63 	.globl _PS
                             64 	.globl _PT2
                             65 	.globl _PADC
                             66 	.globl _PSI
                             67 	.globl _RXD
                             68 	.globl _TXD
                             69 	.globl _INT0
                             70 	.globl _INT1
                             71 	.globl _T0
                             72 	.globl _T1
                             73 	.globl _WR
                             74 	.globl _RD
                             75 	.globl _EX0
                             76 	.globl _ET0
                             77 	.globl _EX1
                             78 	.globl _ET1
                             79 	.globl _ES
                             80 	.globl _ET2
                             81 	.globl _EADC
                             82 	.globl _EA
                             83 	.globl _RI
                             84 	.globl _TI
                             85 	.globl _RB8
                             86 	.globl _TB8
                             87 	.globl _REN
                             88 	.globl _SM2
                             89 	.globl _SM1
                             90 	.globl _SM0
                             91 	.globl _T2
                             92 	.globl _T2EX
                             93 	.globl _IT0
                             94 	.globl _IE0
                             95 	.globl _IT1
                             96 	.globl _IE1
                             97 	.globl _TR0
                             98 	.globl _TF0
                             99 	.globl _TR1
                            100 	.globl _TF1
                            101 	.globl _DACCON
                            102 	.globl _DAC1H
                            103 	.globl _DAC1L
                            104 	.globl _DAC0H
                            105 	.globl _DAC0L
                            106 	.globl _SPICON
                            107 	.globl _SPIDAT
                            108 	.globl _ADCCON3
                            109 	.globl _ADCGAINH
                            110 	.globl _ADCGAINL
                            111 	.globl _ADCOFSH
                            112 	.globl _ADCOFSL
                            113 	.globl _B
                            114 	.globl _ADCCON1
                            115 	.globl _I2CCON
                            116 	.globl _ACC
                            117 	.globl _PSMCON
                            118 	.globl _ADCDATAH
                            119 	.globl _ADCDATAL
                            120 	.globl _ADCCON2
                            121 	.globl _DMAP
                            122 	.globl _DMAH
                            123 	.globl _DMAL
                            124 	.globl _PSW
                            125 	.globl _TH2
                            126 	.globl _TL2
                            127 	.globl _RCAP2H
                            128 	.globl _RCAP2L
                            129 	.globl _T2CON
                            130 	.globl _EADRL
                            131 	.globl _WDCON
                            132 	.globl _EDATA4
                            133 	.globl _EDATA3
                            134 	.globl _EDATA2
                            135 	.globl _EDATA1
                            136 	.globl _ETIM3
                            137 	.globl _ETIM2
                            138 	.globl _ETIM1
                            139 	.globl _ECON
                            140 	.globl _IP
                            141 	.globl _P3
                            142 	.globl _IE2
                            143 	.globl _IE
                            144 	.globl _P2
                            145 	.globl _I2CADD
                            146 	.globl _I2CDAT
                            147 	.globl _SBUF
                            148 	.globl _SCON
                            149 	.globl _P1
                            150 	.globl _TH1
                            151 	.globl _TH0
                            152 	.globl _TL1
                            153 	.globl _TL0
                            154 	.globl _TMOD
                            155 	.globl _TCON
                            156 	.globl _PCON
                            157 	.globl _DPP
                            158 	.globl _DPH
                            159 	.globl _DPL
                            160 	.globl _SP
                            161 	.globl _P0
                            162 	.globl _queueInit
                            163 	.globl _enqueue
                            164 	.globl _dequeue
                            165 ;--------------------------------------------------------
                            166 ; special function registers
                            167 ;--------------------------------------------------------
                            168 	.area RSEG    (DATA)
                    0080    169 _P0	=	0x0080
                    0081    170 _SP	=	0x0081
                    0082    171 _DPL	=	0x0082
                    0083    172 _DPH	=	0x0083
                    0084    173 _DPP	=	0x0084
                    0087    174 _PCON	=	0x0087
                    0088    175 _TCON	=	0x0088
                    0089    176 _TMOD	=	0x0089
                    008A    177 _TL0	=	0x008a
                    008B    178 _TL1	=	0x008b
                    008C    179 _TH0	=	0x008c
                    008D    180 _TH1	=	0x008d
                    0090    181 _P1	=	0x0090
                    0098    182 _SCON	=	0x0098
                    0099    183 _SBUF	=	0x0099
                    009A    184 _I2CDAT	=	0x009a
                    009B    185 _I2CADD	=	0x009b
                    00A0    186 _P2	=	0x00a0
                    00A8    187 _IE	=	0x00a8
                    00A9    188 _IE2	=	0x00a9
                    00B0    189 _P3	=	0x00b0
                    00B8    190 _IP	=	0x00b8
                    00B9    191 _ECON	=	0x00b9
                    00BA    192 _ETIM1	=	0x00ba
                    00BB    193 _ETIM2	=	0x00bb
                    00C4    194 _ETIM3	=	0x00c4
                    00BC    195 _EDATA1	=	0x00bc
                    00BD    196 _EDATA2	=	0x00bd
                    00BE    197 _EDATA3	=	0x00be
                    00BF    198 _EDATA4	=	0x00bf
                    00C0    199 _WDCON	=	0x00c0
                    00C6    200 _EADRL	=	0x00c6
                    00C8    201 _T2CON	=	0x00c8
                    00CA    202 _RCAP2L	=	0x00ca
                    00CB    203 _RCAP2H	=	0x00cb
                    00CC    204 _TL2	=	0x00cc
                    00CD    205 _TH2	=	0x00cd
                    00D0    206 _PSW	=	0x00d0
                    00D2    207 _DMAL	=	0x00d2
                    00D3    208 _DMAH	=	0x00d3
                    00D4    209 _DMAP	=	0x00d4
                    00D8    210 _ADCCON2	=	0x00d8
                    00D9    211 _ADCDATAL	=	0x00d9
                    00DA    212 _ADCDATAH	=	0x00da
                    00DF    213 _PSMCON	=	0x00df
                    00E0    214 _ACC	=	0x00e0
                    00E8    215 _I2CCON	=	0x00e8
                    00EF    216 _ADCCON1	=	0x00ef
                    00F0    217 _B	=	0x00f0
                    00F1    218 _ADCOFSL	=	0x00f1
                    00F2    219 _ADCOFSH	=	0x00f2
                    00F3    220 _ADCGAINL	=	0x00f3
                    00F4    221 _ADCGAINH	=	0x00f4
                    00F5    222 _ADCCON3	=	0x00f5
                    00F7    223 _SPIDAT	=	0x00f7
                    00F8    224 _SPICON	=	0x00f8
                    00F9    225 _DAC0L	=	0x00f9
                    00FA    226 _DAC0H	=	0x00fa
                    00FB    227 _DAC1L	=	0x00fb
                    00FC    228 _DAC1H	=	0x00fc
                    00FD    229 _DACCON	=	0x00fd
                            230 ;--------------------------------------------------------
                            231 ; special function bits
                            232 ;--------------------------------------------------------
                            233 	.area RSEG    (DATA)
                    008F    234 _TF1	=	0x008f
                    008E    235 _TR1	=	0x008e
                    008D    236 _TF0	=	0x008d
                    008C    237 _TR0	=	0x008c
                    008B    238 _IE1	=	0x008b
                    008A    239 _IT1	=	0x008a
                    0089    240 _IE0	=	0x0089
                    0088    241 _IT0	=	0x0088
                    0091    242 _T2EX	=	0x0091
                    0090    243 _T2	=	0x0090
                    009F    244 _SM0	=	0x009f
                    009E    245 _SM1	=	0x009e
                    009D    246 _SM2	=	0x009d
                    009C    247 _REN	=	0x009c
                    009B    248 _TB8	=	0x009b
                    009A    249 _RB8	=	0x009a
                    0099    250 _TI	=	0x0099
                    0098    251 _RI	=	0x0098
                    00AF    252 _EA	=	0x00af
                    00AE    253 _EADC	=	0x00ae
                    00AD    254 _ET2	=	0x00ad
                    00AC    255 _ES	=	0x00ac
                    00AB    256 _ET1	=	0x00ab
                    00AA    257 _EX1	=	0x00aa
                    00A9    258 _ET0	=	0x00a9
                    00A8    259 _EX0	=	0x00a8
                    00B7    260 _RD	=	0x00b7
                    00B6    261 _WR	=	0x00b6
                    00B5    262 _T1	=	0x00b5
                    00B4    263 _T0	=	0x00b4
                    00B3    264 _INT1	=	0x00b3
                    00B2    265 _INT0	=	0x00b2
                    00B1    266 _TXD	=	0x00b1
                    00B0    267 _RXD	=	0x00b0
                    00BF    268 _PSI	=	0x00bf
                    00BE    269 _PADC	=	0x00be
                    00BD    270 _PT2	=	0x00bd
                    00BC    271 _PS	=	0x00bc
                    00BB    272 _PT1	=	0x00bb
                    00BA    273 _PX1	=	0x00ba
                    00B9    274 _PT0	=	0x00b9
                    00B8    275 _PX0	=	0x00b8
                    00C7    276 _PRE2	=	0x00c7
                    00C6    277 _PRE1	=	0x00c6
                    00C5    278 _PRE0	=	0x00c5
                    00C3    279 _WDR1	=	0x00c3
                    00C2    280 _WDR2	=	0x00c2
                    00C1    281 _WDS	=	0x00c1
                    00C0    282 _WDE	=	0x00c0
                    00CF    283 _TF2	=	0x00cf
                    00CE    284 _EXF2	=	0x00ce
                    00CD    285 _RCLK	=	0x00cd
                    00CC    286 _TCLK	=	0x00cc
                    00CB    287 _XEN	=	0x00cb
                    00CA    288 _TR2	=	0x00ca
                    00C9    289 _CNT2	=	0x00c9
                    00C8    290 _CAP2	=	0x00c8
                    00D7    291 _CY	=	0x00d7
                    00D6    292 _AC	=	0x00d6
                    00D5    293 _F0	=	0x00d5
                    00D4    294 _RS1	=	0x00d4
                    00D3    295 _RS0	=	0x00d3
                    00D2    296 _OV	=	0x00d2
                    00D1    297 _F1	=	0x00d1
                    00D0    298 _P	=	0x00d0
                    00DF    299 _ADCI	=	0x00df
                    00DE    300 _DMA	=	0x00de
                    00DD    301 _CCONV	=	0x00dd
                    00DC    302 _SCONV	=	0x00dc
                    00DB    303 _CS3	=	0x00db
                    00DA    304 _CS2	=	0x00da
                    00D9    305 _CS1	=	0x00d9
                    00D8    306 _CS0	=	0x00d8
                    00EF    307 _MDO	=	0x00ef
                    00EE    308 _MDE	=	0x00ee
                    00ED    309 _MCO	=	0x00ed
                    00EC    310 _MDI	=	0x00ec
                    00EB    311 _I2CM	=	0x00eb
                    00EA    312 _I2CRS	=	0x00ea
                    00E9    313 _I2CTX	=	0x00e9
                    00E8    314 _I2CI	=	0x00e8
                    00FF    315 _ISPI	=	0x00ff
                    00FE    316 _WCOL	=	0x00fe
                    00FD    317 _SPE	=	0x00fd
                    00FC    318 _SPIM	=	0x00fc
                    00FB    319 _CPOL	=	0x00fb
                    00FA    320 _CPHA	=	0x00fa
                    00F9    321 _SPR1	=	0x00f9
                    00F8    322 _SPR0	=	0x00f8
                            323 ;--------------------------------------------------------
                            324 ; overlayable register banks
                            325 ;--------------------------------------------------------
                            326 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     327 	.ds 8
                            328 ;--------------------------------------------------------
                            329 ; internal ram data
                            330 ;--------------------------------------------------------
                            331 	.area DSEG    (DATA)
                            332 ;--------------------------------------------------------
                            333 ; overlayable items in internal ram 
                            334 ;--------------------------------------------------------
                            335 	.area OSEG    (OVR,DATA)
                            336 ;--------------------------------------------------------
                            337 ; indirectly addressable internal ram data
                            338 ;--------------------------------------------------------
                            339 	.area ISEG    (DATA)
                            340 ;--------------------------------------------------------
                            341 ; absolute internal ram data
                            342 ;--------------------------------------------------------
                            343 	.area IABS    (ABS,DATA)
                            344 	.area IABS    (ABS,DATA)
                            345 ;--------------------------------------------------------
                            346 ; bit data
                            347 ;--------------------------------------------------------
                            348 	.area BSEG    (BIT)
                            349 ;--------------------------------------------------------
                            350 ; paged external ram data
                            351 ;--------------------------------------------------------
                            352 	.area PSEG    (PAG,XDATA)
                            353 ;--------------------------------------------------------
                            354 ; external ram data
                            355 ;--------------------------------------------------------
                            356 	.area XSEG    (XDATA)
                            357 ;--------------------------------------------------------
                            358 ; absolute external ram data
                            359 ;--------------------------------------------------------
                            360 	.area XABS    (ABS,XDATA)
                            361 ;--------------------------------------------------------
                            362 ; external initialized ram data
                            363 ;--------------------------------------------------------
                            364 	.area XISEG   (XDATA)
                            365 	.area HOME    (CODE)
                            366 	.area GSINIT0 (CODE)
                            367 	.area GSINIT1 (CODE)
                            368 	.area GSINIT2 (CODE)
                            369 	.area GSINIT3 (CODE)
                            370 	.area GSINIT4 (CODE)
                            371 	.area GSINIT5 (CODE)
                            372 	.area GSINIT  (CODE)
                            373 	.area GSFINAL (CODE)
                            374 	.area CSEG    (CODE)
                            375 ;--------------------------------------------------------
                            376 ; global & static initialisations
                            377 ;--------------------------------------------------------
                            378 	.area HOME    (CODE)
                            379 	.area GSINIT  (CODE)
                            380 	.area GSFINAL (CODE)
                            381 	.area GSINIT  (CODE)
                            382 ;--------------------------------------------------------
                            383 ; Home
                            384 ;--------------------------------------------------------
                            385 	.area HOME    (CODE)
                            386 	.area HOME    (CODE)
                            387 ;--------------------------------------------------------
                            388 ; code
                            389 ;--------------------------------------------------------
                            390 	.area CSEG    (CODE)
                            391 ;------------------------------------------------------------
                            392 ;Allocation info for local variables in function 'queueInit'
                            393 ;------------------------------------------------------------
                            394 ;curentQueue               Allocated to registers r2 r3 r4 
                            395 ;------------------------------------------------------------
                            396 ;	SRC/queue.c:4: void queueInit(queue * curentQueue){   
                            397 ;	-----------------------------------------
                            398 ;	 function queueInit
                            399 ;	-----------------------------------------
   0000                     400 _queueInit:
                    0002    401 	ar2 = 0x02
                    0003    402 	ar3 = 0x03
                    0004    403 	ar4 = 0x04
                    0005    404 	ar5 = 0x05
                    0006    405 	ar6 = 0x06
                    0007    406 	ar7 = 0x07
                    0000    407 	ar0 = 0x00
                    0001    408 	ar1 = 0x01
   0000 AA 82               409 	mov	r2,dpl
   0002 AB 83               410 	mov	r3,dph
   0004 AC F0               411 	mov	r4,b
                            412 ;	SRC/queue.c:5: curentQueue->first=0;
   0006 74 21               413 	mov	a,#0x21
   0008 2A                  414 	add	a,r2
   0009 FD                  415 	mov	r5,a
   000A E4                  416 	clr	a
   000B 3B                  417 	addc	a,r3
   000C FE                  418 	mov	r6,a
   000D 8C 07               419 	mov	ar7,r4
   000F 8D 82               420 	mov	dpl,r5
   0011 8E 83               421 	mov	dph,r6
   0013 8F F0               422 	mov	b,r7
   0015 E4                  423 	clr	a
   0016 12s00r00            424 	lcall	__gptrput
                            425 ;	SRC/queue.c:6: curentQueue->last=0;
   0019 74 22               426 	mov	a,#0x22
   001B 2A                  427 	add	a,r2
   001C FD                  428 	mov	r5,a
   001D E4                  429 	clr	a
   001E 3B                  430 	addc	a,r3
   001F FE                  431 	mov	r6,a
   0020 8C 07               432 	mov	ar7,r4
   0022 8D 82               433 	mov	dpl,r5
   0024 8E 83               434 	mov	dph,r6
   0026 8F F0               435 	mov	b,r7
   0028 E4                  436 	clr	a
   0029 12s00r00            437 	lcall	__gptrput
                            438 ;	SRC/queue.c:7: curentQueue->count=0;
   002C 74 23               439 	mov	a,#0x23
   002E 2A                  440 	add	a,r2
   002F FA                  441 	mov	r2,a
   0030 E4                  442 	clr	a
   0031 3B                  443 	addc	a,r3
   0032 FB                  444 	mov	r3,a
   0033 8A 82               445 	mov	dpl,r2
   0035 8B 83               446 	mov	dph,r3
   0037 8C F0               447 	mov	b,r4
   0039 E4                  448 	clr	a
   003A 02s00r00            449 	ljmp	__gptrput
                            450 ;------------------------------------------------------------
                            451 ;Allocation info for local variables in function 'enqueue'
                            452 ;------------------------------------------------------------
                            453 ;curentData                Allocated to stack - offset -3
                            454 ;curentQueue               Allocated to stack - offset 1
                            455 ;------------------------------------------------------------
                            456 ;	SRC/queue.c:10: volatile void enqueue(queue *curentQueue, char curentData)
                            457 ;	-----------------------------------------
                            458 ;	 function enqueue
                            459 ;	-----------------------------------------
   003D                     460 _enqueue:
   003D C0*00               461 	push	_bp
   003F 85 81*00            462 	mov	_bp,sp
   0042 C0 82               463 	push	dpl
   0044 C0 83               464 	push	dph
   0046 C0 F0               465 	push	b
                            466 ;	SRC/queue.c:12: if (curentQueue->count >= QUEUESIZE){
   0048 A8*00               467 	mov	r0,_bp
   004A 08                  468 	inc	r0
   004B 74 23               469 	mov	a,#0x23
   004D 26                  470 	add	a,@r0
   004E FD                  471 	mov	r5,a
   004F E4                  472 	clr	a
   0050 08                  473 	inc	r0
   0051 36                  474 	addc	a,@r0
   0052 FE                  475 	mov	r6,a
   0053 08                  476 	inc	r0
   0054 86 07               477 	mov	ar7,@r0
   0056 8D 82               478 	mov	dpl,r5
   0058 8E 83               479 	mov	dph,r6
   005A 8F F0               480 	mov	b,r7
   005C 12s00r00            481 	lcall	__gptrget
   005F FA                  482 	mov	r2,a
   0060 C3                  483 	clr	c
   0061 64 80               484 	xrl	a,#0x80
   0063 94 A0               485 	subb	a,#0xa0
   0065 40 03               486 	jc	00110$
   0067 02s00rEE            487 	ljmp	00106$
   006A                     488 00110$:
                            489 ;	SRC/queue.c:19: curentQueue->qdata[ curentQueue->last ] = curentData;    
   006A C0 05               490 	push	ar5
   006C C0 06               491 	push	ar6
   006E C0 07               492 	push	ar7
   0070 A8*00               493 	mov	r0,_bp
   0072 08                  494 	inc	r0
   0073 74 22               495 	mov	a,#0x22
   0075 26                  496 	add	a,@r0
   0076 FA                  497 	mov	r2,a
   0077 E4                  498 	clr	a
   0078 08                  499 	inc	r0
   0079 36                  500 	addc	a,@r0
   007A FB                  501 	mov	r3,a
   007B 08                  502 	inc	r0
   007C 86 04               503 	mov	ar4,@r0
   007E 8A 82               504 	mov	dpl,r2
   0080 8B 83               505 	mov	dph,r3
   0082 8C F0               506 	mov	b,r4
   0084 12s00r00            507 	lcall	__gptrget
   0087 FD                  508 	mov	r5,a
   0088 A8*00               509 	mov	r0,_bp
   008A 08                  510 	inc	r0
   008B ED                  511 	mov	a,r5
   008C 26                  512 	add	a,@r0
   008D FD                  513 	mov	r5,a
   008E E4                  514 	clr	a
   008F 08                  515 	inc	r0
   0090 36                  516 	addc	a,@r0
   0091 FE                  517 	mov	r6,a
   0092 08                  518 	inc	r0
   0093 86 07               519 	mov	ar7,@r0
   0095 8D 82               520 	mov	dpl,r5
   0097 8E 83               521 	mov	dph,r6
   0099 8F F0               522 	mov	b,r7
   009B A8*00               523 	mov	r0,_bp
   009D 18                  524 	dec	r0
   009E 18                  525 	dec	r0
   009F 18                  526 	dec	r0
   00A0 E6                  527 	mov	a,@r0
   00A1 12s00r00            528 	lcall	__gptrput
                            529 ;	SRC/queue.c:20: curentQueue->last++;
   00A4 8A 82               530 	mov	dpl,r2
   00A6 8B 83               531 	mov	dph,r3
   00A8 8C F0               532 	mov	b,r4
   00AA 12s00r00            533 	lcall	__gptrget
   00AD FD                  534 	mov	r5,a
   00AE 0D                  535 	inc	r5
   00AF 8A 82               536 	mov	dpl,r2
   00B1 8B 83               537 	mov	dph,r3
   00B3 8C F0               538 	mov	b,r4
   00B5 ED                  539 	mov	a,r5
   00B6 12s00r00            540 	lcall	__gptrput
                            541 ;	SRC/queue.c:21: if( curentQueue->last>=QUEUESIZE)
   00B9 8A 82               542 	mov	dpl,r2
   00BB 8B 83               543 	mov	dph,r3
   00BD 8C F0               544 	mov	b,r4
   00BF 12s00r00            545 	lcall	__gptrget
   00C2 C3                  546 	clr	c
   00C3 64 80               547 	xrl	a,#0x80
   00C5 94 A0               548 	subb	a,#0xa0
   00C7 D0 07               549 	pop	ar7
   00C9 D0 06               550 	pop	ar6
   00CB D0 05               551 	pop	ar5
   00CD 40 0A               552 	jc	00102$
                            553 ;	SRC/queue.c:22: curentQueue->last=0;
   00CF 8A 82               554 	mov	dpl,r2
   00D1 8B 83               555 	mov	dph,r3
   00D3 8C F0               556 	mov	b,r4
   00D5 E4                  557 	clr	a
   00D6 12s00r00            558 	lcall	__gptrput
   00D9                     559 00102$:
                            560 ;	SRC/queue.c:23: curentQueue->count++;
   00D9 8D 82               561 	mov	dpl,r5
   00DB 8E 83               562 	mov	dph,r6
   00DD 8F F0               563 	mov	b,r7
   00DF 12s00r00            564 	lcall	__gptrget
   00E2 FA                  565 	mov	r2,a
   00E3 0A                  566 	inc	r2
   00E4 8D 82               567 	mov	dpl,r5
   00E6 8E 83               568 	mov	dph,r6
   00E8 8F F0               569 	mov	b,r7
   00EA EA                  570 	mov	a,r2
   00EB 12s00r00            571 	lcall	__gptrput
   00EE                     572 00106$:
   00EE 85*00 81            573 	mov	sp,_bp
   00F1 D0*00               574 	pop	_bp
   00F3 22                  575 	ret
                            576 ;------------------------------------------------------------
                            577 ;Allocation info for local variables in function 'dequeue'
                            578 ;------------------------------------------------------------
                            579 ;curentQueue               Allocated to stack - offset 1
                            580 ;curentData                Allocated to stack - offset 4
                            581 ;------------------------------------------------------------
                            582 ;	SRC/queue.c:27: volatile char dequeue(queue *curentQueue)
                            583 ;	-----------------------------------------
                            584 ;	 function dequeue
                            585 ;	-----------------------------------------
   00F4                     586 _dequeue:
   00F4 C0*00               587 	push	_bp
   00F6 85 81*00            588 	mov	_bp,sp
   00F9 C0 82               589 	push	dpl
   00FB C0 83               590 	push	dph
   00FD C0 F0               591 	push	b
   00FF 05 81               592 	inc	sp
                            593 ;	SRC/queue.c:31: if (curentQueue->count <= 0)
   0101 A8*00               594 	mov	r0,_bp
   0103 08                  595 	inc	r0
   0104 74 23               596 	mov	a,#0x23
   0106 26                  597 	add	a,@r0
   0107 FD                  598 	mov	r5,a
   0108 E4                  599 	clr	a
   0109 08                  600 	inc	r0
   010A 36                  601 	addc	a,@r0
   010B FE                  602 	mov	r6,a
   010C 08                  603 	inc	r0
   010D 86 07               604 	mov	ar7,@r0
   010F 8D 82               605 	mov	dpl,r5
   0111 8E 83               606 	mov	dph,r6
   0113 8F F0               607 	mov	b,r7
   0115 12s00r00            608 	lcall	__gptrget
   0118 FA                  609 	mov	r2,a
   0119 C3                  610 	clr	c
   011A 74 80               611 	mov	a,#(0x00 ^ 0x80)
   011C 8A F0               612 	mov	b,r2
   011E 63 F0 80            613 	xrl	b,#0x80
   0121 95 F0               614 	subb	a,b
   0123 40 06               615 	jc	00104$
                            616 ;	SRC/queue.c:32: return 0;
   0125 75 82 00            617 	mov	dpl,#0x00
   0128 02s01rB8            618 	ljmp	00106$
   012B                     619 00104$:
                            620 ;	SRC/queue.c:34: curentData = curentQueue->qdata[ curentQueue->first ];
   012B C0 05               621 	push	ar5
   012D C0 06               622 	push	ar6
   012F C0 07               623 	push	ar7
   0131 A8*00               624 	mov	r0,_bp
   0133 08                  625 	inc	r0
   0134 74 21               626 	mov	a,#0x21
   0136 26                  627 	add	a,@r0
   0137 FA                  628 	mov	r2,a
   0138 E4                  629 	clr	a
   0139 08                  630 	inc	r0
   013A 36                  631 	addc	a,@r0
   013B FB                  632 	mov	r3,a
   013C 08                  633 	inc	r0
   013D 86 04               634 	mov	ar4,@r0
   013F 8A 82               635 	mov	dpl,r2
   0141 8B 83               636 	mov	dph,r3
   0143 8C F0               637 	mov	b,r4
   0145 12s00r00            638 	lcall	__gptrget
   0148 FD                  639 	mov	r5,a
   0149 A8*00               640 	mov	r0,_bp
   014B 08                  641 	inc	r0
   014C ED                  642 	mov	a,r5
   014D 26                  643 	add	a,@r0
   014E FD                  644 	mov	r5,a
   014F E4                  645 	clr	a
   0150 08                  646 	inc	r0
   0151 36                  647 	addc	a,@r0
   0152 FE                  648 	mov	r6,a
   0153 08                  649 	inc	r0
   0154 86 07               650 	mov	ar7,@r0
   0156 8D 82               651 	mov	dpl,r5
   0158 8E 83               652 	mov	dph,r6
   015A 8F F0               653 	mov	b,r7
   015C 12s00r00            654 	lcall	__gptrget
   015F FD                  655 	mov	r5,a
   0160 E5*00               656 	mov	a,_bp
   0162 24 04               657 	add	a,#0x04
   0164 F8                  658 	mov	r0,a
   0165 A6 05               659 	mov	@r0,ar5
                            660 ;	SRC/queue.c:35: curentQueue->first++;
   0167 8A 82               661 	mov	dpl,r2
   0169 8B 83               662 	mov	dph,r3
   016B 8C F0               663 	mov	b,r4
   016D 12s00r00            664 	lcall	__gptrget
   0170 FD                  665 	mov	r5,a
   0171 0D                  666 	inc	r5
   0172 8A 82               667 	mov	dpl,r2
   0174 8B 83               668 	mov	dph,r3
   0176 8C F0               669 	mov	b,r4
   0178 ED                  670 	mov	a,r5
   0179 12s00r00            671 	lcall	__gptrput
                            672 ;	SRC/queue.c:36: if( curentQueue->first>=QUEUESIZE)
   017C 8A 82               673 	mov	dpl,r2
   017E 8B 83               674 	mov	dph,r3
   0180 8C F0               675 	mov	b,r4
   0182 12s00r00            676 	lcall	__gptrget
   0185 C3                  677 	clr	c
   0186 64 80               678 	xrl	a,#0x80
   0188 94 A0               679 	subb	a,#0xa0
   018A D0 07               680 	pop	ar7
   018C D0 06               681 	pop	ar6
   018E D0 05               682 	pop	ar5
   0190 40 0A               683 	jc	00102$
                            684 ;	SRC/queue.c:37: curentQueue->first=0;
   0192 8A 82               685 	mov	dpl,r2
   0194 8B 83               686 	mov	dph,r3
   0196 8C F0               687 	mov	b,r4
   0198 E4                  688 	clr	a
   0199 12s00r00            689 	lcall	__gptrput
   019C                     690 00102$:
                            691 ;	SRC/queue.c:38: curentQueue->count--;
   019C 8D 82               692 	mov	dpl,r5
   019E 8E 83               693 	mov	dph,r6
   01A0 8F F0               694 	mov	b,r7
   01A2 12s00r00            695 	lcall	__gptrget
   01A5 FA                  696 	mov	r2,a
   01A6 1A                  697 	dec	r2
   01A7 8D 82               698 	mov	dpl,r5
   01A9 8E 83               699 	mov	dph,r6
   01AB 8F F0               700 	mov	b,r7
   01AD EA                  701 	mov	a,r2
   01AE 12s00r00            702 	lcall	__gptrput
                            703 ;	SRC/queue.c:41: return(curentData);
   01B1 E5*00               704 	mov	a,_bp
   01B3 24 04               705 	add	a,#0x04
   01B5 F8                  706 	mov	r0,a
   01B6 86 82               707 	mov	dpl,@r0
   01B8                     708 00106$:
   01B8 85*00 81            709 	mov	sp,_bp
   01BB D0*00               710 	pop	_bp
   01BD 22                  711 	ret
                            712 	.area CSEG    (CODE)
                            713 	.area CONST   (CODE)
                            714 	.area XINIT   (CODE)
                            715 	.area CABS    (ABS,CODE)
